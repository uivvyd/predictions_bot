from aiogram import Bot, executor, Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters.state import State, StatesGroup
import requests
from random import randrange
from requests.adapters import HTTPAdapter
import time
from urllib3.util.retry import Retry
from bs4 import BeautifulSoup


TOKEN = 'INSERT YOUR TOKEN HERE'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


types = {'–û–±—â–∏–π': '', '–õ—é–±–æ–≤–Ω—ã–π': 'love-', '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π': 'finance-', '–ó–¥–æ—Ä–æ–≤—å—è': 'health-'}
signs = {'–æ–≤–µ–Ω': 'aries', '—Ç–µ–ª–µ—Ü': 'taurus', '–±–ª–∏–∑–Ω–µ—Ü—ã': 'gemini', '—Ä–∞–∫': 'cancer', '–ª–µ–≤': 'leo', '–¥–µ–≤–∞': 'virgo',
         '–≤–µ—Å—ã': 'libra', '—Å–∫–æ—Ä–ø–∏–æ–Ω': 'scorpio', '—Å—Ç—Ä–µ–ª–µ—Ü': 'sagittarius',
         '–∫–æ–∑–µ—Ä–æ–≥': 'capricorn', '–≤–æ–¥–æ–ª–µ–π': 'aquarius', '—Ä—ã–±—ã': 'pisces'}
dates = {'–ù–∞ —Å–µ–≥–æ–¥–Ω—è': '', '–ù–∞ –∑–∞–≤—Ç—Ä–∞': 'tomorrow', '–ù–∞ –Ω–µ–¥–µ–ª—é': 'week'}
genders = ['–ù–µ –≤–∞–∂–Ω–æ', '–ú—É–∂—á–∏–Ω–∞', '–ñ–µ–Ω—â–∏–Ω–∞']

marks = ['—á–µ—Ä–≤–µ–π', '–±—É–±–µ–Ω', '–ø–∏–∫', '—Ç—Ä–µ—Ñ']
emojis = ['‚ô•', '‚ô¶', '‚ô†', '‚ô£']
values = ["–®–µ—Å—Ç–µ—Ä–∫–∞", "–°–µ–º–µ—Ä–∫–∞", "–í–æ—Å—å–º–µ—Ä–∫–∞", "–î–µ–≤—è—Ç–∫–∞", "–î–µ—Å—è—Ç–∫–∞", "–í–∞–ª–µ—Ç", "–î–∞–º–∞", "–ö–æ—Ä–æ–ª—å", "–¢—É–∑"]
tr_marks = ['chervej', 'buben', 'pik', 'tref']
tr_values = ['shesterka', 'semerka', 'vosmerka', 'devyatka', 'desyatka', 'valet', 'dama', 'korol', 'tuz']

answers = [['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ', '–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π', '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞', '–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º'],
           ['–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª', '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ', '–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã', '–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª', '–î–∞'],
           ['–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ', '–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å', '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å',
            '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å'],
           ['–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π', '–ù–µ—Ç', '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª', '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ', '–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ']]


class Horoscope(StatesGroup):
    type = State()
    sign = State()
    date = State()
    gender = State()


@dp.message_handler(commands=['start'], state="*")
async def start(message, flag=True):
    buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    hor = KeyboardButton('–ì–æ—Ä–æ—Å–∫–æ–ø')
    pred = KeyboardButton('–®–∞—Ä —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏')
    card = KeyboardButton('–°–æ–≤–µ—Ç –æ—Ç –∫–∞—Ä—Ç ')
    buttons.add(hor, pred, card)
    if flag:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π! –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–πü™¨", reply_markup=buttons)
    else:
        await message.answer("–°–Ω–æ–≤–∞ —Ç—ã! –í—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–πü™¨", reply_markup=buttons)


@dp.message_handler(lambda message: message.text == "–ì–æ—Ä–æ—Å–∫–æ–ø", state='*')
async def horoscope(message):
    buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    base = KeyboardButton('–û–±—â–∏–π')
    love = KeyboardButton('–õ—é–±–æ–≤–Ω—ã–π')
    money = KeyboardButton('–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π')
    health = KeyboardButton('–ó–¥–æ—Ä–æ–≤—å—è')
    buttons.add(base, love, money, health)
    await message.answer("C–∫–æ—Ä–µ–µ –ø—Ä–∏—Å—Ç—É–ø–∏–º! –í—ã–±–µ—Ä–∏ –≤–∏–¥ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ü™ê ", reply_markup=buttons)
    await Horoscope.type.set()


@dp.message_handler(state=Horoscope.type)
async def get_type(message, state):
    text = message.text
    if text not in types:
        await message.answer('–í—ã–±–µ—Ä–∏ –≤–∏–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö!')
        return
    async with state.proxy() as data:
        data['type'] = types[text]
    buttons = ReplyKeyboardRemove()
    await Horoscope.sign.set()
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üåÄ', reply_markup=buttons)


@dp.message_handler(state=Horoscope.sign)
async def get_sign(message, state):
    text = message.text.lower()
    if text not in signs:
        await message.answer('–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞!')
        return
    async with state.proxy() as data:
        data['sign'] = signs[text]
    buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    today = KeyboardButton('–ù–∞ —Å–µ–≥–æ–¥–Ω—è')
    tomorrow = KeyboardButton('–ù–∞ –∑–∞–≤—Ç—Ä–∞')
    week = KeyboardButton('–ù–∞ –Ω–µ–¥–µ–ª—é')
    buttons.add(today, tomorrow, week)
    await Horoscope.date.set()
    await message.answer('–ó–¥–æ—Ä–æ–≤–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –≥–æ—Ä–æ—Å–∫–æ–ø–∞ üïê', reply_markup=buttons)


@dp.message_handler(state=Horoscope.date)
async def get_date(message, state):
    text = message.text
    if text not in dates:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö')
        return
    async with state.proxy() as data:
        data['date'] = dates[text]
    buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    male = KeyboardButton('–ú—É–∂—á–∏–Ω–∞')
    female = KeyboardButton('–ñ–µ–Ω—â–∏–Ω–∞')
    dont = KeyboardButton('–ù–µ –≤–∞–∂–Ω–æ')
    buttons.add(male, female, dont)
    await Horoscope.gender.set()
    await message.answer('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≥–µ–Ω–¥–µ—Ä üë§', reply_markup=buttons)


@dp.message_handler(state=Horoscope.gender)
async def get_gender(message, state):
    text = message.text
    if text not in genders:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, —É–∫–∞–∂–∏ –≥–µ–Ω–¥–µ—Ä –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö')
        return
    async with state.proxy() as data:
        type = data['type']
        sign = data['sign']
        period = data['date']
    await state.finish()

    await message.answer('–¢–µ—Ä–ø–µ–Ω–∏—è, –º–æ–π –¥—Ä—É–≥! –°–≤—è–∑—ã–≤–∞—é—Å—å —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ –∏ –∂–¥—É –æ—Ç–≤–µ—Ç–∞!')

    session = requests.Session()
    retry = Retry(connect=3, backoff_factor=0.5)
    adapter = HTTPAdapter(max_retries=retry)
    session.mount('http://', adapter)
    session.mount('https://', adapter)
    url = 'https://astrohelper.ru/' + type + 'horoscope/' + sign + '/' + period
    r = session.get(url)

    page = r.content.decode("utf-8")
    soup = BeautifulSoup(page, 'html.parser')
    horoscope = []
    for div in soup.find_all('div', {'class': "mt-3"}):
        for x in div.find_all('p'):
            horoscope.append(x.get_text())
    buttons = ReplyKeyboardMarkup(resize_keyboard=True)
    again = KeyboardButton('–ó–∞–Ω–æ–≤–æ')
    buttons.add(again)
    periods = {'': '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è', 'tomorrow': '–Ω–∞ –∑–∞–≤—Ç—Ä–∞', 'week': '–Ω–∞ –Ω–µ–¥–µ–ª—é'}

    text_message = '–í–æ—Ç —Ç–≤–æ–π '
    if type == 'love-':
        text_message += '–ª—é–±–æ–≤–Ω—ã–π '
    if type == 'finance-':
        text_message += '—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π '
    text_message += '–≥–æ—Ä–æ—Å–∫–æ–ø '
    if type == 'health-':
        text_message += '–∑–¥–æ—Ä–æ–≤—å—è '
    text_message += periods[period] + 'üåü\n\n'
    await message.answer(text_message + horoscope[genders.index(text)], reply_markup=buttons)


@dp.message_handler(lambda message: message.text == '–°–æ–≤–µ—Ç –æ—Ç –∫–∞—Ä—Ç', state='*')
async def card(message):
    buttons = InlineKeyboardMarkup()
    card = InlineKeyboardButton('üÉè', callback_data="card")
    buttons.add(card)
    await message.answer(
        "–í—ã—Ç–∞—â–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ä—Ç—É –∏–∑ –∫–æ–ª–æ–¥—ã –∏–≥—Ä–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç ‚Äî –æ–Ω–∞ —Ä–∞—Å—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –≤–∞—Å –∂–¥—ë—Ç, –ø–æ–º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –ª—É—á—à–µ –∏ —Ä–∞—Å—Å–µ–µ—Ç —Å–æ–º–Ω–µ–Ω–∏—è –≤ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –¥–Ω–µ.",
        reply_markup=buttons)


@dp.callback_query_handler(text="card")
async def get_card(call):
    await call.message.answer('–°—É–¥—å–±–∞ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É...')
    mark = randrange(4)
    value = randrange(9)
    session = requests.Session()
    retry = Retry(connect=3, backoff_factor=0.5)
    adapter = HTTPAdapter(max_retries=retry)
    session.mount('http://', adapter)
    session.mount('https://', adapter)
    url = 'https://gadalkindom.ru/gadanie/karty-igralnye/' + tr_values[value] + '_' + tr_marks[mark] + '.html'
    r = session.get(url)
    page = r.content.decode("utf-8")
    soup = BeautifulSoup(page, 'html.parser')
    for article in soup.find_all('section', {'itemprop': "articleBody"}):
        if mark > 0:
            x = article.find_all('p')
            text = x[11].get_text()
        else:
            x = article.find_all('ul')
            x = x[2].find_all('li')
            text = x[2].get_text()[13:]
    if text == '':
        text = '–í—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∫—Ä—É–≥. –í–æ–∑–º–æ–∂–Ω–æ, —Å–∫–æ—Ä–æ –ø—Ä–∏–¥—ë—Ç —á–∞—Å, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞–º–Ω–∏, –∞ ' \
               '–Ω–µ —Ä–∞–∑–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Ö. –ü–æ–º–æ–∂–µ—Ç –≤—ã—Å—Ç–æ—è—Ç—å –≤ —ç—Ç–æ—Ç –Ω–µ —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–∏–æ–¥ –æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏–π –¥–ª—è –≤–∞—Å —á–µ–ª–æ–≤–µ–∫ ‚Äì –Ω–µ —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ–º, –Ω–æ –∏ –¥–µ–ª–æ–º.'
    choice = f'–í–∞—à–∞ –∫–∞—Ä—Ç–∞: {values[value]} {marks[mark]} {emojis[mark]}\n\n–°–æ–≤–µ—Ç –∫–∞—Ä—Ç—ã: '
    await call.message.answer(choice + text)


@dp.message_handler(lambda message: message.text == '–®–∞—Ä —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏', state='*')
async def pred(message):
    buttons = InlineKeyboardMarkup()
    card = InlineKeyboardButton('üîÆ', callback_data="pred")
    buttons.add(card)
    await message.answer(
        "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Å—è –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å–µ, –ø—Ä–æ–∏–∑–Ω–µ—Å–∏ –µ–≥–æ –≤—Å–ª—É—Ö –∏ –Ω–∞–∂–º–∏ –Ω–∞ —à–∞—Ä!",
        reply_markup=buttons)


@dp.callback_query_handler(text="pred")
async def get_pred(call):
    await call.message.answer('–ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –¥—É–º–∞–µ—Ç...')
    time.sleep(3)
    await call.message.answer(answers[randrange(4)][randrange(5)])


@dp.message_handler(lambda message: message.text == "–ó–∞–Ω–æ–≤–æ", state='*')
async def again(message):
    await start(message, False)


if __name__ == '__main__':
    executor.start_polling(dp)
